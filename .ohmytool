# ==============  How to use  ==============
# Add .ohmytool to $HOME/;
# It will be auto-sourced by .ohmyshell;
# You can use this file independently 
# or with .ohmyshell (recommended).
# ==============    Outline   ==============
# This is a ToolKit for server manager by 
# one-click installation and environment set.
# --- new_vps_help - Reminde you what to install when you get a new server.
# |
# --- install_vpn - Install vpn with clash (Only support Linux).
# |
# --- install_buildvpn - Install buildvpn on oversea server.
# |
# --- install_xui - Install x-ui to build vpn on oversea server.
# |
# --- install_docker - Install Docker (Only support Ubuntu).
# |
# --- install_colorls - Install colorls and ruby (not suggestion!).
# |
# --- install_trzsz - The trzsz ( trz / tsz ) is a simple file transfer tools.
# |
# --- install_tssh - A ssh client that supports trzsz.
# |
# --- install_spacevim - Install new version vim and spacevim.
# |
# --- install_server-administration - Install server-administration.
# |
# --- install_nginxproxy - Install nginx proxy.
# |
# --- install_homeweb - Install HomeWeb for Junbin Gao.
# |
# --- install_newtab - Install NewTab for Junbin Gao.
# |
# --- install_deepl - Install DeepL translate.
# |
# --- install_cloudreve - Install cloudreve.
# |
# --- install_overleaf - Install OverLeaf.
# |
# --- install_serverstatus - Monitor you server status.
# |
# --- install_frp - Intranet Penetration Tool.
# |
# --- install_chatgpt - Install chat web with chatgpt API.
# |
# --- install_webmonitor - Install web monitor.
# |
# --- install_vncdocker - Install vnc docker.
# |
# --- install_qbittorrent - Install qbittorrent.
# |
# --- install_jellyfin - Install jellyfin.
# |
# --- install_image - Install lsky-pro image.
# |
# --- install_samtools - TODO.
# |
# --- install_PBShelper - Install PBS helper.
# |
# --- install_htop_wo_sudo - Install htop without sudo.
# |
# --- install_autojump - Install autojump.
# |
# --- install_copypaste - Install copypaste.
# ==============  Outline end ==============

ohmytool(){
    echo -e 'This is a ToolKit for server manager by
one-click installation and environment set.'
    echo -e 'List all tookit in .ohmytool'
    echo -e '[*] new_vps_help     - Reminde you what to install when you get a new server.'
    echo -e '[*] install_vpn      - Install vpn with clash (Only support Linux)'
    echo -e '[*] install_buildvpn - Install buildvpn on oversea server'
    echo -e '[*] install_xui      - Install x-ui to build vpn on oversea server'
    echo -e '[*] install_docker   - Install Docker (Only support Ubuntu)'
    echo -e '[*] install_colorls  - Install colorls and ruby (not suggestion!)'
    echo -e '[*] install_trzsz    - The trzsz ( trz / tsz ) is a simple file transfer tools.'
    echo -e '[*] install_tssh     - A ssh client that supports trzsz.'
    echo -e '[*] install_spacevim - Install new version vim and spacevim'
    echo -e '[*] install_server-administration - Install server-administration'
    echo -e '[*] install_nginxproxy - Install nginx proxy'
    echo -e '[*] install_homeweb  - Install HomeWeb for Junbin Gao.'
    echo -e '[*] install_newtab   - Install NewTab for Junbin Gao.'
    echo -e '[*] install_deepl    - Install DeepL translate'
    echo -e '[*] install_cloudreve - Install cloudreve'
    echo -e '[*] install_overleaf - Install OverLeaf'
    echo -e '[*] install_serverstatus - Monitor you server status.'
    echo -e '[*] install_frp      - Intranet Penetration Tool.'
    echo -e '[*] install_chatgpt  - Install chat web with chatgpt API.'
    echo -e '[*] install_webmonitor - Install web monitor.'
    echo -e '[*] install_vncdocker - Install vnc docker.'
    echo -e '[*] install_qbittorrent - Install qbittorrent.'
    echo -e '[*] install_jellyfin - Install jellyfin.'
    echo -e '[*] install_image    - Install lsky-pro image.'
    echo -e '[*] install_samtools - TODO'
    echo -e '[*] install_PBShelper - Install PBS helper.'
    echo -e '[*] install_htop_wo_sudo - Install htop without sudo.'
    echo -e '[*] install_autojump - Install autojump.'
    echo -e '[*] install_copypaste - Install copypaste.'
}

# Reminde you what to install when you get a new server.
new_vps_help(){
    echo 'Reminde you what to install when you get a new server.'
    echo '1. If the network of your server is in China, please [ install_vpn ] first to over the wall.'
    echo '2. If you are now logging with ssh password, please [ install_server-administration ] and run [myadduser] to generate key.'
    echo '3. Please install docker and docker-compose because most app are built by docker. please [ install_docker ].'
    echo '4. Please install nginx proxy manager to help you manage all your web server. [ install_nginxproxy ].'
    echo '5. If you need deploy deepl translate, [ install_deepl ].'
    echo '6. If you need deploy junbin homeweb, [ install_homeweb ].'
    echo '7. If you need deploy NewTab, [ install_newtab ].'
    echo '8. If you need deploy latex editor overleaf, [ install_overleaf ].'
    echo '9. If you need deploy your own cloud drive, [ install_cloudreve ].'
    echo '10. If you need deploy server monitor, [ install_serverstatus ].'
    echo '11. If you need deploy intranet penetration tool, [ install_frp ].'
    echo '12. If you need deploy chat web with chatgpt API, [ install_chatgpt ].'
    echo '13. If you need deploy samtools, [ install_samtools ].'
    echo '14. If you need deploy server-administration, [ install_server-administration ].'
    echo '15. If you need deploy trzsz, [ install_trzsz ].'
    echo '16. If you need deploy colorls, [ install_colorls ].'
    echo '17. If you need deploy tssh, [ install_tssh ].'
    echo '18. If you need deploy spacevim, [ install_spacevim ].'
    echo '19. If you need deploy x-ui, [ install_xui ].'
    echo '20. If you need deploy qbittorrent, [ install_qbittorrent ].'
    echo '21. If you need deploy jellyfin, [ install_jellyfin ].'
    echo '22. If you need deploy lsky-pro image, [ install_image ].'
    echo 'After you installed all the server you needed, please config the nginx proxy.'
}

# Install vpn with clash (Only support Linux)
# install_vpn(){
#     echo 'Install vpn with clash (Only support Linux)'
#     git clone https://gitee.com/gao-junbin/LinuxVPN ~/clash_tmp
#     cd ~/clash_tmp
#     sh ./install.sh
#     cd
#     rm -rf ~/clash_tmp
# }

# Install vpn with clash (with docker)
install_vpn(){
    echo 'Install vpn with clash (with docker)'
    echo 'The docker image is from https://hub.docker.com/r/junbingao/clash'
    echo 'Where to save data: (default: /root): \c'
    read vpn_path
    if [ "${vpn_path}" = "" ];then
        cd /root
    else
        cd ${vpn_path}
    fi
    mkdir clash
    cd clash
    curl -s https://raw.githubusercontent.com/gaojunbin/ConfigFile/master/clash/docker-compose.yml -o docker-compose.yml
    mkdir clash
    cd clash
    echo 'Subscribed Links (you can set it later): \c'
    read link
    if [ -n "$link" ]; then
        wget -O config.yaml $link --no-check-certificate
    fi
    cd ..
    docker-compose up -d
    echo 'Success! Please run [listen_vpn] in local to set vpn.'
    echo 'Please run [startvpn] to start vpn server or [stopvpn] to stop vpn server. Defalt is always stop.'
}

# Install buildvpn on oversea server
# Old version, recommend to use install_xui instead.
install_buildvpn(){
    echo 'Old version, recommend to use install_xui instead.'
    echo 'Continue? ([y]/n)? \c'
    read continue_yon
    continue_yon=${continue_yon:-n}
    if [ "${continue_yon}" = "y" ];then
        echo 'Install buildvpn on oversea server.'
        echo 'The content is relatively sensitive in mainland China, so please contact me directly for related repository permissions.'
        git clone git@github.com:gaojunbin/buildvpn-trojan.git ~/.buildvpn-trojan
        cd ~/.buildvpn-trojan
        bash ./build.sh
        cd
    else
        echo 'Install buildvpn stoped!'
    fi
}

# Install x-ui on oversea server
install_xui(){
    echo 'Install x-ui to build vpn on oversea server.'
    echo 'Recommend to install_nginxproxy first.'
    echo 'More infomation can be seen on https://github.com/FranzKafkaYu/x-ui'
    bash <(curl -Ls https://raw.githubusercontent.com/FranzKafkaYu/x-ui/master/install.sh)
}

# Install Docker (Only support Ubuntu)
install_docker(){
    echo 'Install docker (Only support Ubuntu).'
    echo 'Note: Due to differences in the system environment, 
this automated script may not be successfully installed. 
If the installation fails, please refer to this script process 
to install it yourself or visit the docker official website.'
    echo 'You Must be in the root group!!'
    echo 'Manual installation process:
$ sudo su -
$ sudo curl -sS https://get.docker.com/ | sh
# Install docker-compose
$ sudo curl -L "https://github.com/docker/compose/releases/download/v2.2.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
$ sudo chmod +x /usr/local/bin/docker-compose
$ sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
# If need install docker with GPU, please go on!
$ distribution=$(. /etc/os-release;echo $ID$VERSION_ID)
$ curl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | sudo apt-key add -
$ curl -s -L https://nvidia.github.io/nvidia-docker/$distribution/nvidia-docker.list | sudo tee /etc/apt/sources.list.d/nvidia-docker.list
$ sudo apt-get update && sudo apt-get install -y nvidia-container-toolkit
$ sudo systemctl restart docker'
    echo -e "Continue? ([y]/n)? \c"
    read continue_yon
    continue_yon=${continue_yon:-y}
    if [ "${continue_yon}" = "y" ];then
        sudo curl -sS https://get.docker.com/ | sh
        sudo curl -L "https://github.com/docker/compose/releases/download/v2.2.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
        docker -v
        docker-compose -v
        echo -e "Have Nvidia GPU? (y/[n])? \c"
        read yon
        yon=${yon:-n}
        if [ "${yon}" = "y" ];then
            distribution=$(. /etc/os-release;echo $ID$VERSION_ID)
            curl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | sudo apt-key add -
            curl -s -L https://nvidia.github.io/nvidia-docker/$distribution/nvidia-docker.list | sudo tee /etc/apt/sources.list.d/nvidia-docker.list
            sudo apt-get update && sudo apt-get install -y nvidia-container-toolkit
        fi
        sudo systemctl restart docker
    fi
}

# Install colorls and ruby
# TODO: may have error in install ruby - openssl
# ref https://github.com/athityakumar/colorls
install_colorls(){
    echo "This is a function to install colorls, as well as ruby 3.1.2."
    echo "Note: If you have the root permission, suggest to install/update ruby your self, then run this function."
    echo "Because this function install ruby without root only for $USER."
    echo -e "Do you have ruby >= 2.6? ([y]/n)? \c" 
    read yon
    if [ "${yon}" = "y" ];then
        gem install colorls
    else
        echo -e "Do you want to install ruby-3.1? ([y]/n)? \c" 
        read install_yon
        if [ "${install_yon}" = "y" ];then
            mkdir ~/colorls_tmp
            cd ~/colorls_tmp
            wget https://cache.ruby-lang.org/pub/ruby/3.1/ruby-3.1.2.tar.gz
            extract ruby-3.1.2.tar.gz
            cd ruby-3.1.2
            ./configure --prefix=$HOME/.ruby
            make && make install
            export PATH=~/.ruby/bin:$PATH
            echo "may have error in install ruby - openssl!"
            gem install colorls
            cd
            rm -rf ~/colorls_tmp
        else
            echo 'Install colorls stoped! You must install ruby >= 2.6 first.'
        fi
    fi
}

# The trzsz ( trz / tsz ) is a simple file transfer tools.
install_trzsz(){
    echo 'The trzsz ( trz / tsz ) is a simple file transfer tools.'
    echo -e 'Choose the OS [Number] you use now:'
    echo -e '[1] MacOS'
    echo -e '[2] Ubuntu'
    echo -e '[3] Debian (Beta)'
    echo -e '[4] Windows (Beta)'
    echo -e '[5] Other'
    echo -e 'input you choose: \c'
    read os_num
    if [ "${os_num}" = 1 ];then
        echo -e 'Choose the Installation method [Number] you want (default: 1):'
        echo -e '[1] homebrew (recommend)'
        echo -e '[2] pip'
        echo -e 'input you choose: \c'
        read method_num
        method_num=${method_num:-1}
        if [ "${method_num}" = 1 ];then
            echo "Install with homebrew..."
            brew update
            brew install trzsz-go
        elif [ "${method_num}" = 2 ];then
            echo "Install with pip..."
            pip install trzsz
        else
            echo 'Invalid input!'
        fi
    elif [ "${os_num}" = 2 ];then
        echo -e 'Choose the Installation method [Number] you want (default: 1):'
        echo -e '[1] apt with sudo (recommend)'
        echo -e '[2] pip'
        echo -e 'input you choose: \c'
        read method_num
        method_num=${method_num:-1}
        if [ "${method_num}" = 1 ];then
            echo "Install with apt..."
            sudo apt update && sudo apt install software-properties-common
            sudo add-apt-repository ppa:trzsz/ppa && sudo apt update
            sudo apt install trzsz
        elif [ "${method_num}" = 2 ];then
            echo "Install with pip..."
            pip install trzsz
        else
            echo 'Invalid input!'
        fi
    elif [ "${os_num}" = 3 ];then
        echo -e 'Choose the Installation method [Number] you want (default: 1):'
        echo -e '[1] apt with sudo (recommend)'
        echo -e '[2] pip'
        echo -e 'input you choose: \c'
        read method_num
        method_num=${method_num:-1}
        if [ "${method_num}" = 1 ];then
            echo "Install with apt..."
            sudo apt install curl gpg
            curl -s 'https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x7074ce75da7cc691c1ae1a7c7e51d1ad956055ca' | gpg --dearmor -o /usr/share/keyrings/trzsz.gpg
            echo 'deb [signed-by=/usr/share/keyrings/trzsz.gpg] https://ppa.launchpadcontent.net/trzsz/ppa/ubuntu jammy main' | sudo tee /etc/apt/sources.list.d/trzsz.list
            sudo apt update
            sudo apt install trzsz
        elif [ "${method_num}" = 2 ];then
            echo "Install with pip..."
            pip install trzsz
        else
            echo 'Invalid input!'
        fi
    elif [ "${os_num}" = 4 ];then
        echo "Install with scoop... (https://scoop.sh)"
        scoop bucket add extras
        scoop update
        scoop install trzsz
    elif [ "${os_num}" = 5 ];then
        echo "Other OS, please visit https://trzsz.github.io/cn/go"
    else
        echo 'Invalid input!'
    fi
}

# A ssh client that supports trzsz.
install_tssh(){
    echo 'A ssh client that supports trzsz. (https://github.com/trzsz/trzsz-ssh)'
    echo -e 'Choose the OS [Number] you use now:'
    echo -e '[1] MacOS'
    echo -e '[2] Ubuntu'
    echo -e '[3] Windows (Beta)'
    echo -e 'input you choose: \c'
    read os_num
    if [ "${os_num}" = 1 ];then
        echo "Install with homebrew..."
        brew update
        brew install trzsz-ssh
    elif [ "${os_num}" = 2 ];then
        echo "Install with apt..."
        sudo apt update && sudo apt install software-properties-common
        sudo add-apt-repository ppa:trzsz/ppa && sudo apt update
        sudo apt install tssh
    elif [ "${os_num}" = 3 ];then
        echo "Install with scoop... (https://scoop.sh)"
        scoop bucket add extras
        scoop update
        scoop install tssh
    else
        echo 'Invalid input!'
    fi
}

# Install vim and SpaceVim
# ref vim: https://www.vim.org/download.php#unix
# ref SpaceVim: https://spacevim.org/cn/quick-start-guide/
install_spacevim(){
    echo "This is a function to install SpaceVim, as well as vim latest."
    echo "SpaceVim makes vim powerful!"
    echo "Note: SpaceVim need new version of vim!"
    echo -e "Install vim latest from source or not? ([y]/n)? \c" 
    read yon
    if [ "${yon}" = "y" ];then
       git clone https://github.com/vim/vim.git $HOME/.vim-source
       cd .vim-source/src
       make
       echo "export PATH=$HOME/.vim-source/src:"'$PATH' >> ${shell_file}
       sc
    fi
    curl -sLf https://spacevim.org/cn/install.sh | bash -s -- --install vim
    echo "See more information via type:"
    echo "$ curl -sLf https://spacevim.org/cn/install.sh | bash -s -- -h"
}

# Install server-administration
install_server-administration(){
    echo 'This is a toolkit for server administration.'
    git clone https://github.com/gaojunbin/.server-administration.git ~/.server-administration
}

# Install nginx proxy for server to:
# 1. One-click deployment of SSL and automatic renewal
# 2. Reverse proxy domain, achieve binding between domain and port. e.g. nginx.junbingao.com -> ipv4:81
install_nginxproxy(){
    echo 'This a function for install nginx-proxy zh. Use port: 80,81,443.'
    echo 'docker image: https://hub.docker.com/repository/docker/junbingao/nginxproxy'
    echo 'docker compose file: https://github.com/gaojunbin/ConfigFile/tree/master/nginx-proxy-zh'
    echo -e 'Where to save data: (default: /root): \c'
    read nginx_path
    if [ "${nginx_path}" = "" ];then
        cd /root
    else
        cd ${nginx_path}
    fi
    mkdir nginx-proxy
    cd nginx-proxy
    mkdir data
    mkdir letsencrypt
    curl -s https://raw.githubusercontent.com/gaojunbin/ConfigFile/master/nginx-proxy-zh/docker-compose.yml -o docker-compose.yml
    docker-compose up -d
    echo "Success! Now you can login via localhost:81"
    echo "Initial account:"
    echo "Email   : admin@example.com"
    echo "Password: changeme"
}

# Install HomeWeb for Junbin Gao
install_homeweb(){
    echo 'This is a function for installing homeweb of Junbin Gao (junbingao.com)'
    echo 'The repo is private. You must have the keygen to access.'
    echo -e 'Where to save data: (default: /root): \c'
    read homeweb_path
    if [ "${homeweb_path}" = "" ];then
        cd /root
    else
        cd ${homeweb_path}
    fi

    git clone git@github.com:gaojunbin/HomeWeb.git --recurse-submodules && cd HomeWeb
    docker build -t homeweb:latest .

    echo -e 'The port for HomeWeb (default: 80 ): \c'
    read homeweb_port
    if [ "${homeweb_port}" = "" ];then
        docker run -d --rm -p 80:80 -v $PWD:/var/www/html --name homeweb homeweb:latest
        echo 'Success! Now you can visit HomeWeb via localhost:80'
    else
        docker run -d --rm -p ${homeweb_port}:80 -v $PWD:/var/www/html --name homeweb homeweb:latest
        echo 'Success! Now you can visit HomeWeb.'
    fi
}

# Install NewTab for Junbin Gao.
install_newtab(){
    echo 'This is a function for installing NewTab of Junbin Gao.'
    echo -e 'Where to save data: (default: /root): \c'
    read homeweb_path
    if [ "${homeweb_path}" = "" ];then
        cd /root
    else
        cd ${homeweb_path}
    fi

    git clone https://github.com/gaojunbin/NewTab.git && cd NewTab

    docker-compose up -d
    
    echo 'Success! Now you can visit NewTab.'
}

# Install DeepL translate
install_deepl(){
    echo -e 'The port for DeepL (default: 11000 ): \c'
    read deepl_port
    if [ "${deepl_port}" = "" ];then
        docker run -d --rm -p 11000:80 junbingao/deepl:latest
    else
        docker run -d --rm -p ${deepl_port}:80 junbingao/deepl:latest
    fi
}

# Install cloudreve
install_cloudreve(){
    echo -e 'Where to save data: (default: /root): \c'
    read cloudreve_path
    if [ "${cloudreve_path}" = "" ];then
        cd /root
    else
        cd ${cloudreve_path}
    fi
    mkdir cloudreve
    cd cloudreve
    
    mkdir -vp cloudreve/{uploads,avatar}
    touch cloudreve/conf.ini
    touch cloudreve/cloudreve.db
    mkdir -p aria2/config
    mkdir -p data/aria2
    chmod -R 777 data/aria2

    curl -s https://raw.githubusercontent.com/gaojunbin/ConfigFile/master/cloudreve/docker-compose.yml -o docker-compose.yml
    docker-compose up -d
    echo "Success! Now you can login via localhost:5212"
    echo "Initial account:"
    echo "$ docker-compose logs"
}

# Install Overleaf
install_overleaf(){
    echo -e 'Where to save data: (default: /root): \c'
    read overleaf_path
    if [ "${overleaf_path}" = "" ];then
        cd /root
    else
        cd ${overleaf_path}
    fi
    mkdir overleaf
    cd overleaf
    mkdir mongo_data
    mkdir redis_data
    mkdir sharelatex_data
    chmod -R 777 mongo_data 
    chmod -R 777 redis_data 
    chmod -R 777 sharelatex_data

    # Prompt for port number
    echo -e "Enter the local port number for Sharelatex: \c"
    read sharelatex_port

    # Prompt for SHARELATEX_SITE_URL
    echo -e "Enter the value for SHARELATEX_SITE_URL [default: https://overleaf.junbingao.com]: \c"
    read sharelatex_site_url
    sharelatex_site_url=${sharelatex_site_url:-https://overleaf.junbingao.com}

    # Prompt for SHARELATEX_EMAIL_ values
    echo -e "Enter the value for SHARELATEX_EMAIL_FROM_ADDRESS: \c"
    read sharelatex_email_from_address
    echo -e "Enter the value for SHARELATEX_EMAIL_SMTP_HOST: \c"
    read sharelatex_email_smtp_host
    echo -e "Enter the value for SHARELATEX_EMAIL_SMTP_PORT: \c"
    read sharelatex_email_smtp_port
    echo -e "Enter the value for SHARELATEX_EMAIL_SMTP_PASS: \c"
    read sharelatex_email_smtp_pass

    # Generate docker-compose.yml
    cat > docker-compose.yml <<EOF
version: '2.2'
services:
    sharelatex:
        restart: always
        image: junbingao/sharelatex:latest
        container_name: sharelatex
        depends_on:
            mongo:
                condition: service_healthy
            redis:
                condition: service_started
        ports:
            - $sharelatex_port:80
        links:
            - mongo
            - redis
        volumes:
            - ./sharelatex_data:/var/lib/sharelatex
            - ./sharelatex_data/register.pug:/overleaf/services/web/app/views/user/register.pug:ro
            - ./sharelatex_data/router.js:/overleaf/services/web/app/src/router.js:ro
            - ./sharelatex_data/UserController.js:/overleaf/services/web/app/src/Features/User/UserController.js:ro
            - ./sharelatex_data/UserPagesController.js:/overleaf/services/web/app/src/Features/User/UserPagesController.js:ro
        environment:
            SHARELATEX_APP_NAME: Overleaf Community Edition
            SHARELATEX_MONGO_URL: mongodb://mongo/sharelatex
            SHARELATEX_REDIS_HOST: redis
            REDIS_HOST: redis
            ENABLED_LINKED_FILE_TYPES: 'url,project_file'
            ENABLE_CONVERSIONS: 'true'
            EMAIL_CONFIRMATION_DISABLED: 'true'
            TEXMFVAR: /var/lib/sharelatex/tmp/texmf-var
            SHARELATEX_SITE_URL: $sharelatex_site_url
            SHARELATEX_EMAIL_FROM_ADDRESS: "$sharelatex_email_from_address"
            SHARELATEX_EMAIL_SMTP_HOST: $sharelatex_email_smtp_host
            SHARELATEX_EMAIL_SMTP_PORT: $sharelatex_email_smtp_port
            SHARELATEX_EMAIL_SMTP_SECURE: 'true'
            SHARELATEX_EMAIL_SMTP_USER: $sharelatex_email_from_address
            SHARELATEX_EMAIL_SMTP_PASS: $sharelatex_email_smtp_pass
            SHARELATEX_EMAIL_SMTP_TLS_REJECT_UNAUTH: 'true'
            SHARELATEX_EMAIL_SMTP_IGNORE_TLS: 'false'

    mongo:
        restart: always
        image: junbingao/mongo:latest
        container_name: mongo
        expose:
            - 27017
        volumes:
            - ./mongo_data:/data/db
        healthcheck:
            test: echo 'db.stats().ok' | mongo localhost:27017/test --quiet
            interval: 10s
            timeout: 10s
            retries: 5

    redis:
        restart: always
        image: junbingao/redis:latest
        container_name: redis
        expose:
            - 6379
        volumes:
            - ./redis_data:/data
EOF

    echo "docker-compose.yml file generated successfully."
    
    curl -s https://raw.githubusercontent.com/gaojunbin/ConfigFile/master/overleaf/register.pug -o sharelatex_data/register.pug
    curl -s https://raw.githubusercontent.com/gaojunbin/ConfigFile/master/overleaf/router.js -o sharelatex_data/router.js
    curl -s https://raw.githubusercontent.com/gaojunbin/ConfigFile/master/overleaf/UserController.js -o sharelatex_data/UserController.js
    curl -s https://raw.githubusercontent.com/gaojunbin/ConfigFile/master/overleaf/UserPagesController.js -o sharelatex_data/UserPagesController.js

    echo 'Congratulations! You have installed overleaf successfully.'
    echo '!!Important!! Please change the invitation code in UserController.js Line 195 like:'
    echo '$ vim sharelatex_data/UserController.js'
    echo 'Then start the service with:'
    echo '$ docker-compose up -d'
    echo 'first-admin page: ip:$sharelatex_port/launchpad'
}


# Monitor you server status.
install_serverstatus(){
    echo 'Monitor you server status.'
    echo -e 'Choose the Function [Number] you want:'
    echo -e '[1] Single - Ward'
    echo -e '[2] Multiple - ServerStatus'
    echo -e 'input you choose: \c'
    read func_num
    if [ "${func_num}" = 1 ];then
        echo -e 'Where to save data: (default: /root): \c'
        read serverstatus_path
        if [ "${serverstatus_path}" = "" ];then
            cd /root
        else
            cd ${serverstatus_path}
        fi
        mkdir ward
        cd ward
        curl -s https://raw.githubusercontent.com/gaojunbin/ConfigFile/master/ward/docker-compose.yml -o docker-compose.yml
        docker-compose up -d
        echo 'Success!'
        echo 'Run on port: 4000'
    elif [ "${func_num}" = 2 ];then
        echo 'Have not prepared...'
    else
        echo 'Invalid Input!'
    fi
}

# Intranet Penetration Tool.
install_frp(){
    generate_frps_ini() {
        echo -e 'frps listening port（bind_port）: \c'
        read bind_port
        echo -e 'dashboard username（dashboard_user）: \c'
        read dashboard_user
        echo -e 'dashboard password（dashboard_pwd）: \c'
        read dashboard_pwd
        echo -e 'dashboard port（dashboard_port）: \c'
        read dashboard_port
        echo -e 'token (tocken): \c'
        read token

        cat > frps.ini <<EOF
[common]
#frp listening port
bind_port = $bind_port
kcp_bind_port = $bind_port

#dashboard username
dashboard_user = $dashboard_user

#dashboard password
dashboard_pwd = $dashboard_pwd

#dashboard port，you can visit http://ip:$dashboard_port
dashboard_port = $dashboard_port

#tocken
token = $token
EOF
        echo "frps.ini has been generated. Please keep the documents properly and do not pass them on."
    }

    generate_frpc_ini() {
        echo -e 'server_addr: \c'
        read server_addr
        echo -e 'server_port: \c'
        read server_port
        echo -e 'token: \c'
        read token
        
        cat > frpc.ini <<EOF
# frpc.ini
[common]
server_addr = $server_addr
server_port = $server_port
token = $token
EOF
        echo -e 'Add new service？(y/n): \c'
        read add_block
        while [[ "$add_block" == "y" || "$add_block" == "Y" ]]; do
            echo -e 'service_name: \c'
            read service_name
            echo -e 'service_local_port: \c'
            read service_local_port
            echo -e 'service_remote_port: \c'
            read service_remote_port

            echo >> frpc.ini
            echo "[$service_name]" >> frpc.ini
            echo "type = tcp" >> frpc.ini
            echo "local_ip = 127.0.0.1" >> frpc.ini
            echo "local_port = $service_local_port" >> frpc.ini
            echo "remote_port = $service_remote_port" >> frpc.ini

            echo -e 'Add new service？(y/n): \c'
            read add_block
        done
        echo "frpc.ini has been generated. Please keep the documents properly and do not pass them on."
    }
    
    echo 'Intranet Penetration Tool.'
    echo -e 'Choose the Function [Number] you want:'
    echo -e '[1] Server - frps'
    echo -e '[2] Client - frpc'
    echo -e 'input you choose: \c'
    read frp_func_num
    if [ "${frp_func_num}" = 1 ];then
        echo -e 'Where to save data: (default: /root): \c'
        read frps_path
        if [ "${frps_path}" = "" ];then
            cd /root
        else
            cd ${frps_path}
        fi
        mkdir frps
        cd frps
        generate_frps_ini
        curl -s https://raw.githubusercontent.com/gaojunbin/ConfigFile/master/frp/frps/docker-compose.yml -o docker-compose.yml
        docker-compose up -d

    elif [ "${frp_func_num}" = 2 ];then
        echo -e 'Where to save data: (default: /root): \c'
        read frpc_path
        if [ "${frpc_path}" = "" ];then
            cd /root
        else
            cd ${frpc_path}
        fi
        mkdir frpc
        cd frpc
        generate_frpc_ini
        curl -s https://raw.githubusercontent.com/gaojunbin/ConfigFile/master/frp/frpc/docker-compose.yml -o docker-compose.yml
        docker-compose up -d
    else
        echo 'Invalid Input!'
    fi
}

# Install chat web with chatgpt API
install_chatgpt(){
    echo -e 'Install chat web with chatgpt API.'
    echo -e 'Where to save data: (default: /root): \c'
    read chat_path
    if [ "${chat_path}" = "" ];then
        cd /root
    else
        cd ${chat_path}
    fi
    mkdir chatgpt
    cd chatgpt
    curl -s https://raw.githubusercontent.com/gaojunbin/ConfigFile/master/chatgpt/docker-compose.yml -o docker-compose.yml
    echo -e 'Please modify the docker-compose file as the comments suggesting.'
    echo -e 'Then run $ docker-compose up -d'
}

# Install web monitor to monitor your website.
install_webmonitor(){
    echo -e 'Install web monitor to monitor your website.'
    echo -e 'More details: https://github.com/LogicJake/WebMonitor'
    echo -e 'Where to save data: (default: /root): \c'
    read webmonitor_path
    if [ "${webmonitor_path}" = "" ];then
        cd /root
    else
        cd ${webmonitor_path}
    fi
    mkdir webmonitor
    cd webmonitor
    curl -s https://raw.githubusercontent.com/gaojunbin/ConfigFile/master/webmonitor/docker-compose.yml -o docker-compose.yml
    echo -e 'Please modify the docker-compose file as the comments suggesting.'
    echo -e 'Then run $ docker-compose up -d'
}

# Install vnc docker
install_vncdocker(){
    echo -e 'Install vnc docker.'
    echo -e 'More details: https://github.com/fcwu/docker-ubuntu-vnc-desktop'
    echo -e 'Where to save data: (default: /root): \c'
    read vnc_path
    if [ "${vnc_path}" = "" ];then
        cd /root
    else
        cd ${vnc_path}
    fi
    mkdir vnc
    cd vnc
    curl -s https://raw.githubusercontent.com/gaojunbin/ConfigFile/master/vnc/docker-compose.yml -o docker-compose.yml
    echo -e 'Please modify the docker-compose file as the comments suggesting.'
    echo -e 'Then run $ docker-compose up -d'
}

# Install qbittorrent
install_qbittorrent(){
    echo -e 'Install qbittorrent.'
    echo -e 'User docker or bash shell? ([d]/b): \c'
    read db
    db=${db:-d}
    if [ "${db}" = "d" ];then
        echo -e 'Where to save data: (default: /root): \c'
        read qbittorrent_path
        if [ "${qbittorrent_path}" = "" ];then
            cd /root
        else
            cd ${qbittorrent_path}
        fi
        git clone https://github.com/gaojunbin/qbittorrent.git
        cd qbittorrent
        docker-compose up -d
    elif [ "${db}" = "b" ];then
        echo -e 'set username: \c'
        read username
        echo -e 'set password: \c'
        read password
        bash <(wget -qO- https://raw.githubusercontent.com/jerry048/Dedicated-Seedbox/main/Install.sh) ${username} ${password} 1024
    else
        echo 'Invalid Input!'
    fi
}

# Install jellyfin
install_jellyfin(){
    echo -e 'Install jellyfin.'
    echo -e 'where to save data: (default: /root): \c'
    read jellyfin_path
    if [ "${jellyfin_path}" = "" ];then
        cd /root
    else
        cd ${jellyfin_path}
    fi
    mkdir jellyfin
    cd jellyfin
    curl -s https://raw.githubusercontent.com/gaojunbin/ConfigFile/master/jellyfin/docker-compose.yml -o docker-compose.yml
    docker-compose up -d
}

# install lsky-pro
install_image(){
    echo -e 'Install lsky-pro.'
    echo -e 'where to save data: (default: /root): \c'
    read image_path
    if [ "${image_path}" = "" ];then
        cd /root
    else
        cd ${image_path}
    fi
    mkdir lsky-pro
    cd lsky-pro
    curl -s https://raw.githubusercontent.com/gaojunbin/ConfigFile/master/lsky-pro/docker-compose.yml -o docker-compose.yml
    docker-compose up -d
}

# TODO: install samtools
install_samtools(){
    # TODO
}

# Install PBShelper
install_PBShelper(){
    echo -e 'Install PBS helper.'
    git clone https://github.com/gaojunbin/PBShelper.git ~/.PBShelper
}

# Install htop_wo_sudo
install_htop_wo_sudo(){
    echo -e 'Install htop without sudo.'
    echo -e 'where to save data: (default: $HOME): \c'
    read htop_path
    if [ "${htop_path}" = "" ];then
        cd
    else
        cd ${htop_path}
    fi
    mkdir htop
    cd htop
    wget -O htop.rpm https://download-ib01.fedoraproject.org/pub/epel/7/x86_64/Packages/h/htop-2.2.0-3.el7.x86_64.rpm --no-check-certificate
    rpm2cpio htop.rpm |cpio -idvm
    
    if [ -n "${shell_file}" ];then
        echo "export PATH=$HOME/htop/usr/bin:"'$PATH' >> ${shell_file}
        source ${shell_file}
    fi
}

# Install autojump
install_autojump(){
    echo -e 'Install autojump.'
    echo -e 'where to save data: (default: $HOME): \c'
    read autojump_path
    if [ "${autojump_path}" = "" ];then
        cd
    else
        mkdir -p ${autojump_path}
        cd ${autojump_path}
    fi
    git clone https://github.com/wting/autojump.git
    cd autojump
    ./install.py
}

# Install copypaste
install_copypaste(){
    echo -e 'Install copypaste.'
    echo -e 'where to save data: (default: $HOME): \c'
    read copypaste_path
    if [ "${copypaste_path}" = "" ];then
        cd
    else
        mkdir -p ${copypaste_path}
        cd ${copypaste_path}
    fi

    echo -e 'set MICROBIN_BASIC_AUTH_USERNAME: \c'
    read MICROBIN_BASIC_AUTH_USERNAME
    echo -e 'set MICROBIN_ADMIN_USERNAME: \c'
    read MICROBIN_ADMIN_USERNAME
    echo -e 'set MICROBIN_ADMIN_PASSWORD: \c'
    read MICROBIN_ADMIN_PASSWORD
    echo -e 'set MICROBIN_PUBLIC_PATH: \c'
    read MICROBIN_PUBLIC_PATH
    echo -e 'set MICROBIN_TITLE: \c'
    read MICROBIN_TITLE
    echo -e 'set MICROBIN_FOOTER_TEXT: \c'
    read MICROBIN_FOOTER_TEXT
    echo -e 'set MICROBIN_PORT: \c'
    read MICROBIN_PORT
    cat > docker-compose.yml <<EOF
version: '3'
services:
    microbin:
        image: danielszabo99/microbin:latest
        container_name: microbin
        restart: unless-stopped
        environment:
        - TZ=Asia/Shanghai
        - MICROBIN_BASIC_AUTH_USERNAME=$MICROBIN_BASIC_AUTH_USERNAME
        - MICROBIN_ADMIN_USERNAME=$MICROBIN_ADMIN_USERNAME
        - MICROBIN_ADMIN_PASSWORD=$MICROBIN_ADMIN_PASSWORD
        - MICROBIN_PUBLIC_PATH=$MICROBIN_PUBLIC_PATH
        - MICROBIN_EDITABLE=true
        - MICROBIN_ENCRYPTION_CLIENT_SIDE=true
        - MICROBIN_ENCRYPTION_SERVER_SIDE=true
        - MICROBIN_HIGHLIGHTSYNTAX=true
        - MICROBIN_HASH_IDS=true
        - MICROBIN_HELP=true
        - MICROBIN_SHORT_PATH=true
        - MICROBIN_NO_LISTING=false
        - MICROBIN_QR=true
        - MICROBIN_TITLE=$MICROBIN_TITLE
        - MICROBIN_HIDE_LOGO=true
        - MICROBIN_FOOTER_TEXT=$MICROBIN_FOOTER_TEXT
        ports:
        - $MICROBIN_PORT:8080
        volumes:
        - ./microbin-data:/app/pasta_data
EOF
    docker-compose up -d
}