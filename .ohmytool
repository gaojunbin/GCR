# ==============  How to use  ==============
# Add .ohmytool to $HOME/;
# It will be auto-sourced by .ohmyshell;
# You can use this file independently 
# or with .ohmyshell (recommended).
# ==============    Outline   ==============
# This is a ToolKit for server manager by 
# one-click installation and environment set.
# --- install_vpn - Install vpn with clash (Only support Linux).
# |
# --- install_buildvpn - Install buildvpn on oversea server.
# |
# --- install_docker - Install Docker (Only support Ubuntu).
# |
# --- install_colorls - Install colorls and ruby (not suggestion!).
# |
# --- install_spacevim - Install new version vim and spacevim.
# |
# --- install_server-administration - Install server-administration.
# |
# --- install_nginxproxy - Install nginx proxy.
# |
# --- install_homeweb - Install HomeWeb for Junbin Gao.
# |
# --- install_deepl - Install DeepL translate.
# |
# --- install_cloudreve - Install cloudreve.
# |
# --- install_overleaf - Install OverLeaf.
# |
# --- install_samtools - TODO.
# ==============  Outline end ==============

ohmytool(){
    echo -e 'This is a ToolKit for server manager by
one-click installation and environment set.'
    echo -e 'List all tookit in .ohmytool'
    echo -e '[*] install_vpn      - Install vpn with clash (Only support Linux)'
    echo -e '[*] install_buildvpn - Install buildvpn on oversea server'
    echo -e '[*] install_docker   - Install Docker (Only support Ubuntu)'
    echo -e '[*] install_colorls  - Install colorls and ruby (not suggestion!)'
    echo -e '[*] install_spacevim - Install new version vim and spacevim'
    echo -e '[*] install_server-administration - Install server-administration'
    echo -e '[*] install_nginxproxy - Install nginx proxy'
    echo -e '[*] install_homeweb  - Install HomeWeb for Junbin Gao.'
    echo -e '[*] install_deepl    - Install DeepL translate'
    echo -e '[*] install_cloudreve - Install cloudreve'
    echo -e '[*] install_overleaf - Install OverLeaf'
    echo -e '[*] install_samtools - TODO'
}

# Install vpn with clash (Only support Linux)
install_vpn(){
    echo 'Install vpn with clash (Only support Linux)'
    git clone https://gitee.com/gao-junbin/LinuxVPN ~/clash_tmp
    cd ~/clash_tmp
    sh ./install.sh
    cd
    rm -rf ~/clash_tmp
}

# Install buildvpn on oversea server
install_buildvpn(){
    echo 'Install buildvpn on oversea server.'
    echo 'The content is relatively sensitive in mainland China, so please contact me directly for related repository permissions.'
    git clone git@github.com:gaojunbin/buildvpn-trojan.git ~/.buildvpn-trojan
    cd ~/.buildvpn-trojan
    bash ./build.sh
    cd
}

# Install Docker (Only support Ubuntu)
install_docker(){
    echo 'Install docker (Only support Ubuntu).'
    echo 'Note: Due to differences in the system environment, 
this automated script may not be successfully installed. 
If the installation fails, please refer to this script process 
to install it yourself or visit the docker official website.'
    echo 'You Must be in the root group!!'
    echo 'Manual installation process:
$ sudo su -
$ sudo curl -sS https://get.docker.com/ | sh
# If need install docker with GPU, please go on!
$ distribution=$(. /etc/os-release;echo $ID$VERSION_ID)
$ curl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | sudo apt-key add -
$ curl -s -L https://nvidia.github.io/nvidia-docker/$distribution/nvidia-docker.list | sudo tee /etc/apt/sources.list.d/nvidia-docker.list
$ sudo apt-get update && sudo apt-get install -y nvidia-container-toolkit
$ sudo systemctl restart docker'
    echo -e "Continue? ([y]/n)? \c"
    read continue_yon
    if [ "${continue_yon}" = "y" ];then
        sudo su -
        sudo curl -sS https://get.docker.com/ | sh
        echo -e "Have Nvidia GPU? ([y]/n)? \c"
        read yon
        if [ "${yon}" = "y" ];then
            distribution=$(. /etc/os-release;echo $ID$VERSION_ID)
            curl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | sudo apt-key add -
            curl -s -L https://nvidia.github.io/nvidia-docker/$distribution/nvidia-docker.list | sudo tee /etc/apt/sources.list.d/nvidia-docker.list
            sudo apt-get update && sudo apt-get install -y nvidia-container-toolkit
        fi
        sudo systemctl restart docker
    fi
}

# Install colorls and ruby
# TODO: may have error in install ruby - openssl
# ref https://github.com/athityakumar/colorls
install_colorls(){
    echo "This is a function to install colorls, as well as ruby 3.1.2."
    echo "Note: If you have the root permission, suggest to install/update ruby your self, then run this function."
    echo "Because this function install ruby without root only for $USER."
    echo -e "Do you have ruby >= 2.6? ([y]/n)? \c" 
    read yon
    if [ "${yon}" = "y" ];then
        gem install colorls
    else
        echo -e "Do you want to install ruby-3.1? ([y]/n)? \c" 
        read install_yon
        if [ "${install_yon}" = "y" ];then
            mkdir ~/colorls_tmp
            cd ~/colorls_tmp
            wget https://cache.ruby-lang.org/pub/ruby/3.1/ruby-3.1.2.tar.gz
            extract ruby-3.1.2.tar.gz
            cd ruby-3.1.2
            ./configure --prefix=$HOME/.ruby
            make && make install
            export PATH=~/.ruby/bin:$PATH
            echo "may have error in install ruby - openssl!"
            gem install colorls
            cd
            rm -rf ~/colorls_tmp
        else
            echo 'Install colorls stoped! You must install ruby >= 2.6 first.'
        fi
    fi
}

# Install vim and SpaceVim
# ref vim: https://www.vim.org/download.php#unix
# ref SpaceVim: https://spacevim.org/cn/quick-start-guide/
install_spacevim(){
    echo "This is a function to install SpaceVim, as well as vim latest."
    echo "SpaceVim makes vim powerful!"
    echo "Note: SpaceVim need new version of vim!"
    echo -e "Install vim latest from source or not? ([y]/n)? \c" 
    read yon
    if [ "${yon}" = "y" ];then
       git clone https://github.com/vim/vim.git $HOME/.vim-source
       cd .vim-source/src
       make
       echo "export PATH=$HOME/.vim-source/src:"'$PATH' >> ${shell_file}
       sc
    fi
    curl -sLf https://spacevim.org/cn/install.sh | bash -s -- --install vim
    echo "See more information via type:"
    echo "$ curl -sLf https://spacevim.org/cn/install.sh | bash -s -- -h"
}

# Install server-administration
install_server-administration(){
    echo 'This is a toolkit for server administration.'
    git clone https://github.com/gaojunbin/.server-administration.git ~/.server-administration
}

# Install nginx proxy for server to:
# 1. One-click deployment of SSL and automatic renewal
# 2. Reverse proxy domain, achieve binding between domain and port. e.g. nginx.junbingao.com -> ipv4:81
install_nginxproxy(){
    echo 'This a function for install nginx-proxy zh. Use port: 80,81,443.'
    echo 'docker image: https://hub.docker.com/repository/docker/junbingao/nginxproxy'
    echo 'docker compose file: https://github.com/gaojunbin/ConfigFile/tree/master/nginx-proxy-zh'
    echo -e 'Where to save data: (default: /root): \c'
    read nginx_path
    if [ "${nginx_path}" = "" ];then
        cd /root
    else
        cd ${nginx_path}
    fi
    mkdir nginx-proxy
    cd nginx-proxy
    mkdir data
    mkdir letsencrypt
    curl -s https://raw.githubusercontent.com/gaojunbin/ConfigFile/master/nginx-proxy-zh/docker-compose.yml -o docker-compose.yml
    docker-compose up -d
    echo "Success! Now you can login via localhost:81"
    echo "Initial account:"
    echo "Email   : admin@example.com"
    echo "Password: changeme"
}

# Install HomeWeb for Junbin Gao
install_homeweb(){
    echo 'This is a function for installing homeweb of Junbin Gao (junbingao.com)'
    echo 'The repo is private. You must have the keygen to access.'
    echo -e 'Where to save data: (default: /root): \c'
    read homeweb_path
    if [ "${homeweb_path}" = "" ];then
        cd /root
    else
        cd ${homeweb_path}
    fi

    git clone git@github.com:gaojunbin/HomeWeb.git --recurse-submodules && cd HomeWeb
    docker build -t homeweb:latest .

    echo -e 'The port for HomeWeb (default: 80 ): \c'
    read homeweb_port
    if [ "${homeweb_port}" = "" ];then
        docker run -d --rm -p 80:80 -v $PWD:/var/www/html --name homeweb homeweb:latest
        echo 'Success! Now you can visit HomeWeb via localhost:80'
    else
        docker run -d --rm -p ${homeweb_port}:80 -v $PWD:/var/www/html --name homeweb homeweb:latest
        echo 'Success! Now you can visit HomeWeb via localhost:${homeweb_port}'
    fi
}


# Install DeepL translate
install_deepl(){
    echo -e 'The port for DeepL (default: 11000 ): \c'
    read deepl_port
    if [ "${deepl_port}" = "" ];then
        docker run -d --rm -p 11000:80 junbingao/deepl:latest
    else
        docker run -d --rm -p ${deepl_port}:80 junbingao/deepl:latest
    fi
}

# Install cloudreve
install_cloudreve(){
    echo -e 'Where to save data: (default: /root): \c'
    read cloudreve_path
    if [ "${cloudreve_path}" = "" ];then
        cd /root
    else
        cd ${cloudreve_path}
    fi

    mkdir -vp cloudreve/{uploads,avatar}
    touch cloudreve/conf.ini
    touch cloudreve/cloudreve.db
    mkdir -p aria2/config
    mkdir -p data/aria2
    chmod -R 777 data/aria2

    curl -s https://raw.githubusercontent.com/gaojunbin/ConfigFile/master/cloudreve/docker-compose.yml -o docker-compose.yml
    docker-compose up -d
    echo "Success! Now you can login via localhost:5212"
    echo "Initial account:"
    echo "$ docker-compose logs"
}

# Install Overleaf
install_overleaf(){
    echo 'You must fisrt install docker and docker-compose fisrt!!'
    echo 'You Must be in the root group!!'
    sudo su -
    mkdir sharelatex
    cd sharelatex
    wget https://raw.githubusercontent.com/sharelatex/sharelatex/master/docker-compose.yml
    echo 'Please follow the steps below to install manually:'
    echo '
1. Please edit docker-compose.yml:
    Port in sharelatex (e.g. 8080:80)
    PATH for sharelatex/mongo/redis (e.g. /root/sharelatex/...)
2. $ docker-compose up -d
3. $ docker exec -it sharelatex bash
4. You should install full texlive as below in the container.
5. $ tlmgr option repository https://mirrors.tuna.tsinghua.edu.cn/CTAN/systems/texlive/tlnet/
6. $ tlmgr update --self --all
7. $ tlmgr install scheme-full &'
}


# TODO: install samtools
install_samtools(){
    # TODO
}