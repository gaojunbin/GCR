# ==============  How to use  ==============
# Add .ohmytool to $HOME/;
# It will be auto-sourced by .ohmyshell;
# You can use this file independently 
# or with .ohmyshell (recommended).
# ==============    Outline   ==============
# This is a ToolKit for server manager by 
# one-click installation and environment set.
# --- new_vpns_help - Reminde you what to install when you get a new server.
# |
# --- install_vpn - Install vpn with clash (Only support Linux).
# |
# --- install_buildvpn - Install buildvpn on oversea server.
# |
# --- install_docker - Install Docker (Only support Ubuntu).
# |
# --- install_colorls - Install colorls and ruby (not suggestion!).
# |
# --- install_spacevim - Install new version vim and spacevim.
# |
# --- install_server-administration - Install server-administration.
# |
# --- install_nginxproxy - Install nginx proxy.
# |
# --- install_homeweb - Install HomeWeb for Junbin Gao.
# |
# --- install_newtab - Install NewTab for Junbin Gao.
# |
# --- install_deepl - Install DeepL translate.
# |
# --- install_cloudreve - Install cloudreve.
# |
# --- install_overleaf - Install OverLeaf.
# |
# --- install_serverstatus - Monitor you server status.
# |
# --- install_frp - Intranet Penetration Tool.
# |
# --- install_samtools - TODO.
# ==============  Outline end ==============

ohmytool(){
    echo -e 'This is a ToolKit for server manager by
one-click installation and environment set.'
    echo -e 'List all tookit in .ohmytool'
    echo -e '[*] new_vpns_help    - Reminde you what to install when you get a new server.'
    echo -e '[*] install_vpn      - Install vpn with clash (Only support Linux)'
    echo -e '[*] install_buildvpn - Install buildvpn on oversea server'
    echo -e '[*] install_docker   - Install Docker (Only support Ubuntu)'
    echo -e '[*] install_colorls  - Install colorls and ruby (not suggestion!)'
    echo -e '[*] install_spacevim - Install new version vim and spacevim'
    echo -e '[*] install_server-administration - Install server-administration'
    echo -e '[*] install_nginxproxy - Install nginx proxy'
    echo -e '[*] install_homeweb  - Install HomeWeb for Junbin Gao.'
    echo -e '[*] install_newtab   - Install NewTab for Junbin Gao.'
    echo -e '[*] install_deepl    - Install DeepL translate'
    echo -e '[*] install_cloudreve - Install cloudreve'
    echo -e '[*] install_overleaf - Install OverLeaf'
    echo -e '[*] install_serverstatus - Monitor you server status.'
    echo -e '[*] install_frp      - Intranet Penetration Tool.'
    echo -e '[*] install_samtools - TODO'
}

# Reminde you what to install when you get a new server.
new_vpns_help(){
    echo 'Reminde you what to install when you get a new server.'
    echo '1. If the network of your server is in China, please [ install_vpn ] first to over the wall.'
    echo '2. If you are now logging with ssh password, please [ install_server-administration ] and run [myadduser] to generate key.'
    echo '3. Please install docker and docker compose because most app are built by docker. please [ install_docker ].'
    echo '4. Please install nginx proxy manager to help you manage all your web server. [ install_nginxproxy ].'
    echo '5. If you need deploy deepl translate, [ install_deepl ].'
    echo '6. If you need deploy your homeweb, [ install_homeweb ].'
    echo '7. If you need deploy NewTab, [ install_newtab ].'
    echo '8. If you need deploy latex editor overleaf, [ install_cloudreve ].'
    echo '9. If you need deploy your own cloud drive, [ install_cloudreve ].'
    echo '10. If you need deploy server monitor, [ install_serverstatus ].'
    echo '11. If you need deploy intranet penetration tool, [ install_frp ].'
    echo 'After you installed all the server you needed, please config the nginx proxy.'
}

# Install vpn with clash (Only support Linux)
install_vpn(){
    echo 'Install vpn with clash (Only support Linux)'
    git clone https://gitee.com/gao-junbin/LinuxVPN ~/clash_tmp
    cd ~/clash_tmp
    sh ./install.sh
    cd
    rm -rf ~/clash_tmp
}

# Install buildvpn on oversea server
install_buildvpn(){
    echo 'Install buildvpn on oversea server.'
    echo 'The content is relatively sensitive in mainland China, so please contact me directly for related repository permissions.'
    git clone git@github.com:gaojunbin/buildvpn-trojan.git ~/.buildvpn-trojan
    cd ~/.buildvpn-trojan
    bash ./build.sh
    cd
}

# Install Docker (Only support Ubuntu)
install_docker(){
    echo 'Install docker (Only support Ubuntu).'
    echo 'Note: Due to differences in the system environment, 
this automated script may not be successfully installed. 
If the installation fails, please refer to this script process 
to install it yourself or visit the docker official website.'
    echo 'You Must be in the root group!!'
    echo 'Manual installation process:
$ sudo su -
$ sudo curl -sS https://get.docker.com/ | sh
# If need install docker with GPU, please go on!
$ distribution=$(. /etc/os-release;echo $ID$VERSION_ID)
$ curl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | sudo apt-key add -
$ curl -s -L https://nvidia.github.io/nvidia-docker/$distribution/nvidia-docker.list | sudo tee /etc/apt/sources.list.d/nvidia-docker.list
$ sudo apt-get update && sudo apt-get install -y nvidia-container-toolkit
$ sudo systemctl restart docker'
    echo -e "Continue? ([y]/n)? \c"
    read continue_yon
    if [ "${continue_yon}" = "y" ];then
        sudo curl -sS https://get.docker.com/ | sh
        echo -e "Have Nvidia GPU? ([y]/n)? \c"
        read yon
        if [ "${yon}" = "y" ];then
            distribution=$(. /etc/os-release;echo $ID$VERSION_ID)
            curl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | sudo apt-key add -
            curl -s -L https://nvidia.github.io/nvidia-docker/$distribution/nvidia-docker.list | sudo tee /etc/apt/sources.list.d/nvidia-docker.list
            sudo apt-get update && sudo apt-get install -y nvidia-container-toolkit
        fi
        sudo systemctl restart docker
    fi
}

# Install colorls and ruby
# TODO: may have error in install ruby - openssl
# ref https://github.com/athityakumar/colorls
install_colorls(){
    echo "This is a function to install colorls, as well as ruby 3.1.2."
    echo "Note: If you have the root permission, suggest to install/update ruby your self, then run this function."
    echo "Because this function install ruby without root only for $USER."
    echo -e "Do you have ruby >= 2.6? ([y]/n)? \c" 
    read yon
    if [ "${yon}" = "y" ];then
        gem install colorls
    else
        echo -e "Do you want to install ruby-3.1? ([y]/n)? \c" 
        read install_yon
        if [ "${install_yon}" = "y" ];then
            mkdir ~/colorls_tmp
            cd ~/colorls_tmp
            wget https://cache.ruby-lang.org/pub/ruby/3.1/ruby-3.1.2.tar.gz
            extract ruby-3.1.2.tar.gz
            cd ruby-3.1.2
            ./configure --prefix=$HOME/.ruby
            make && make install
            export PATH=~/.ruby/bin:$PATH
            echo "may have error in install ruby - openssl!"
            gem install colorls
            cd
            rm -rf ~/colorls_tmp
        else
            echo 'Install colorls stoped! You must install ruby >= 2.6 first.'
        fi
    fi
}

# Install vim and SpaceVim
# ref vim: https://www.vim.org/download.php#unix
# ref SpaceVim: https://spacevim.org/cn/quick-start-guide/
install_spacevim(){
    echo "This is a function to install SpaceVim, as well as vim latest."
    echo "SpaceVim makes vim powerful!"
    echo "Note: SpaceVim need new version of vim!"
    echo -e "Install vim latest from source or not? ([y]/n)? \c" 
    read yon
    if [ "${yon}" = "y" ];then
       git clone https://github.com/vim/vim.git $HOME/.vim-source
       cd .vim-source/src
       make
       echo "export PATH=$HOME/.vim-source/src:"'$PATH' >> ${shell_file}
       sc
    fi
    curl -sLf https://spacevim.org/cn/install.sh | bash -s -- --install vim
    echo "See more information via type:"
    echo "$ curl -sLf https://spacevim.org/cn/install.sh | bash -s -- -h"
}

# Install server-administration
install_server-administration(){
    echo 'This is a toolkit for server administration.'
    git clone https://github.com/gaojunbin/.server-administration.git ~/.server-administration
}

# Install nginx proxy for server to:
# 1. One-click deployment of SSL and automatic renewal
# 2. Reverse proxy domain, achieve binding between domain and port. e.g. nginx.junbingao.com -> ipv4:81
install_nginxproxy(){
    echo 'This a function for install nginx-proxy zh. Use port: 80,81,443.'
    echo 'docker image: https://hub.docker.com/repository/docker/junbingao/nginxproxy'
    echo 'docker compose file: https://github.com/gaojunbin/ConfigFile/tree/master/nginx-proxy-zh'
    echo -e 'Where to save data: (default: /root): \c'
    read nginx_path
    if [ "${nginx_path}" = "" ];then
        cd /root
    else
        cd ${nginx_path}
    fi
    mkdir nginx-proxy
    cd nginx-proxy
    mkdir data
    mkdir letsencrypt
    curl -s https://raw.githubusercontent.com/gaojunbin/ConfigFile/master/nginx-proxy-zh/docker-compose.yml -o docker-compose.yml
    docker-compose up -d
    echo "Success! Now you can login via localhost:81"
    echo "Initial account:"
    echo "Email   : admin@example.com"
    echo "Password: changeme"
}

# Install HomeWeb for Junbin Gao
install_homeweb(){
    echo 'This is a function for installing homeweb of Junbin Gao (junbingao.com)'
    echo 'The repo is private. You must have the keygen to access.'
    echo -e 'Where to save data: (default: /root): \c'
    read homeweb_path
    if [ "${homeweb_path}" = "" ];then
        cd /root
    else
        cd ${homeweb_path}
    fi

    git clone git@github.com:gaojunbin/HomeWeb.git --recurse-submodules && cd HomeWeb
    docker build -t homeweb:latest .

    echo -e 'The port for HomeWeb (default: 80 ): \c'
    read homeweb_port
    if [ "${homeweb_port}" = "" ];then
        docker run -d --rm -p 80:80 -v $PWD:/var/www/html --name homeweb homeweb:latest
        echo 'Success! Now you can visit HomeWeb via localhost:80'
    else
        docker run -d --rm -p ${homeweb_port}:80 -v $PWD:/var/www/html --name homeweb homeweb:latest
        echo 'Success! Now you can visit HomeWeb.'
    fi
}

# Install NewTab for Junbin Gao.
install_newtab(){
    echo 'This is a function for installing NewTab of Junbin Gao.'
    echo -e 'Where to save data: (default: /root): \c'
    read homeweb_path
    if [ "${homeweb_path}" = "" ];then
        cd /root
    else
        cd ${homeweb_path}
    fi

    git clone https://github.com/gaojunbin/NewTab.git && cd NewTab

    docker-compose up -d
    
    echo 'Success! Now you can visit NewTab.'
}

# Install DeepL translate
install_deepl(){
    echo -e 'The port for DeepL (default: 11000 ): \c'
    read deepl_port
    if [ "${deepl_port}" = "" ];then
        docker run -d --rm -p 11000:80 junbingao/deepl:latest
    else
        docker run -d --rm -p ${deepl_port}:80 junbingao/deepl:latest
    fi
}

# Install cloudreve
install_cloudreve(){
    echo -e 'Where to save data: (default: /root): \c'
    read cloudreve_path
    if [ "${cloudreve_path}" = "" ];then
        cd /root
    else
        cd ${cloudreve_path}
    fi
    mkdir cloudreve
    cd cloudreve
    
    mkdir -vp cloudreve/{uploads,avatar}
    touch cloudreve/conf.ini
    touch cloudreve/cloudreve.db
    mkdir -p aria2/config
    mkdir -p data/aria2
    chmod -R 777 data/aria2

    curl -s https://raw.githubusercontent.com/gaojunbin/ConfigFile/master/cloudreve/docker-compose.yml -o docker-compose.yml
    docker-compose up -d
    echo "Success! Now you can login via localhost:5212"
    echo "Initial account:"
    echo "$ docker-compose logs"
}

# Install Overleaf
install_overleaf(){
    echo 'You must fisrt install docker and docker-compose fisrt!!'
    echo 'You Must be in the root group!!'
    echo -e 'Where to save data: (default: /root): \c'
    read overleaf_path
    if [ "${overleaf_path}" = "" ];then
        cd /root
    else
        cd ${overleaf_path}
    fi
    mkdir overleaf
    cd overleaf
    curl -s https://raw.githubusercontent.com/gaojunbin/ConfigFile/master/overleaf/docker-compose.yml -o docker-compose.yml
    mkdir mongo_data
    mkdir redis_data
    mkdir sharelatex_data
    chmod -R 777 mongo_data 
    chmod -R 777 redis_data 
    chmod -R 777 sharelatex_data

    docker-compose up -d

    echo 'You should manually install the next steps:'
    echo '$ docker exec -it sharelatex bash'
    echo 'You should install full texlive as below in the container.'
    echo '$ tlmgr option repository https://mirrors.tuna.tsinghua.edu.cn/CTAN/systems/texlive/tlnet/'
    echo '$ tlmgr update --self --all'
    echo '$ tlmgr install scheme-full &'
    echo 'Success!'
    echo 'Run on port: 10080'
    echo 'first-admin page: localhost:10080/launchpad'
}


# Monitor you server status.
install_serverstatus(){
    echo 'Monitor you server status.'
    echo -e 'Choose the Function [Number] you want:'
    echo -e '[1] Single - Ward'
    echo -e '[2] Multiple - ServerStatus'
    echo -e 'input you choose: \c'
    read func_num
    if [ "${func_num}" = 1 ];then
        echo -e 'Where to save data: (default: /root): \c'
        read serverstatus_path
        if [ "${serverstatus_path}" = "" ];then
            cd /root
        else
            cd ${serverstatus_path}
        fi
        mkdir ward
        cd ward
        curl -s https://raw.githubusercontent.com/gaojunbin/ConfigFile/master/ward/docker-compose.yml -o docker-compose.yml
        docker-compose up -d
        echo 'Success!'
        echo 'Run on port: 4000'
    elif [ "${func_num}" = 2 ];then
        echo 'Have not prepared...'
    else
        echo 'Invalid Input!'
    fi
}

# Intranet Penetration Tool.
install_frp(){
    generate_frps_ini() {
        read -p "frps listening port（bind_port）: " bind_port
        read -p "dashboard username（dashboard_user）: " dashboard_user
        read -p "dashboard password（dashboard_pwd）: " dashboard_pwd
        read -p "dashboard port（dashboard_port）: " dashboard_port
        read -p "token (tocken): " token

        cat > frps.ini <<EOF
[common]
#frp listening port
bind_port = $bind_port
kcp_bind_port = $bind_port

#dashboard username
dashboard_user = $dashboard_user

#dashboard password
dashboard_pwd = $dashboard_pwd

#dashboard port，you can visit http://ip:$dashboard_port
dashboard_port = $dashboard_port

#tocken
token = $token
EOF
        echo "frps.ini has been generated. Please keep the documents properly and do not pass them on."
    }

    generate_frpc_ini() {
        read -p "server_addr: " server_addr
        read -p "server_port: " server_port
        read -p "token: " token
        read -p "ssh_local_port: " ssh_local_port
        read -p "ssh_remote_port: " ssh_remote_port

        cat > frpc.ini <<EOF
# frpc.ini
[common]
server_addr = $server_addr
server_port = $server_port
token = $token

[ssh]
type = tcp
local_ip = 127.0.0.1
local_port = $ssh_local_port
remote_port = $ssh_remote_port 
EOF
        read -p "Add new service？(y/n): " add_block
        while [[ "$add_block" == "y" || "$add_block" == "Y" ]]; do
            read -p "service_name: " service_name
            read -p "service_local_port: " service_local_port
            read -p "service_remote_port: " service_remote_port

            echo >> frpc.ini
            echo "[$service_name]" >> frpc.ini
            echo "type = tcp" >> frpc.ini
            echo "local_ip = 127.0.0.1" >> frpc.ini
            echo "local_port = $service_local_port" >> frpc.ini
            echo "remote_port = $service_remote_port" >> frpc.ini

            read -p "Add new service？(y/n): " add_block
        done
        echo "frpc.ini has been generated. Please keep the documents properly and do not pass them on."
    }
    
    echo 'Intranet Penetration Tool.'
    echo -e 'Choose the Function [Number] you want:'
    echo -e '[1] Server - frps'
    echo -e '[2] Client - frpc'
    echo -e 'input you choose: \c'
    read frp_func_num
    if [ "${frp_func_num}" = 1 ];then
        echo -e 'Where to save data: (default: /root): \c'
        read frps_path
        if [ "${frps_path}" = "" ];then
            cd /root
        else
            cd ${frps_path}
        fi
        mkdir frps
        cd frps
        generate_frps_ini
        curl -s https://raw.githubusercontent.com/gaojunbin/ConfigFile/master/frp/frps/docker-compose.yml -o docker-compose.yml
        docker-compose up -d

    elif [ "${frp_func_num}" = 2 ];then
        echo -e 'Where to save data: (default: /root): \c'
        read frpc_path
        if [ "${frpc_path}" = "" ];then
            cd /root
        else
            cd ${frpc_path}
        fi
        mkdir frpc
        cd frpc
        generate_frpc_ini
        curl -s https://raw.githubusercontent.com/gaojunbin/ConfigFile/master/frp/frpc/docker-compose.yml -o docker-compose.yml
        docker-compose up -d
    else
        echo 'Invalid Input!'
    fi
}

# TODO: install samtools
install_samtools(){
    # TODO
}