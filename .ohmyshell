# =========How to use=============
# for bash
# >> echo 'source ~/.ohmyshell' >> ~/.bashrc
# for zsh
# >> echo 'source ~/.ohmyshell' >> ~/.zshrc
# =========Outline================
# --- myupdate - support update GCR Toolkit from GitHub Repo.
# |
# --- mytool - Some basic tools for common using.
# |
# --- mypip - pip tools.
# |
# --- myenv - Anaconda tools.
# |
# --- mygpu - useful functions for GPU and cuda.
# |
# --- mypermission - some functions for permission, passward, etc.
# |
# --- mygit - Git tools.
# |
# --- Others
# ========Outline end============

# shell type [~/.bashrc or ~/.zshrc]
# support tabby shell working directory reporting
if [[ "$SHELL" == *"zsh" ]];then
    shell_file=~/.zshrc
    precmd () { echo -n "\x1b]1337;CurrentDir=$(pwd)\x07" }
elif [[ "$SHELL" == *"bash" ]];then
    shell_file=~/.bashrc
    export PS1="$PS1\[\e]1337;CurrentDir="'$(pwd)\a\]'
else
    echo 'Invalid shell type: ' $SHELL
fi

# support .ohmytool
if [ -f ~/.ohmytool ];then
    source ~/.ohmytool
fi

# support server-administration
if [ -d ~/.server-administration ];then
    source ~/.server-administration/init.sh
fi

# support PBShelper
if [ -d ~/.PBShelper ];then
    source ~/.PBShelper/init.sh
fi

# support safe-rm
if [ -f ~/.safe-rm ];then
    alias rm='~/.safe-rm'
    alias del='rm -rf'
else
    echo 'Your current rm is dangerous! Please run [install_safe-rm] first and restart your shell.'
fi

# support update GCR Toolkit from GitHub Repo
myupdate(){
    curl -o ~/.ohmyshell https://raw.githubusercontent.com/gaojunbin/GCR/master/.ohmyshell
    curl -o ~/.ohmytool https://raw.githubusercontent.com/gaojunbin/GCR/master/.ohmytool 
    curl -o ~/.ohmyzsh https://raw.githubusercontent.com/gaojunbin/GCR/master/.ohmyzsh
    curl -o ~/.p9k.zsh https://raw.githubusercontent.com/gaojunbin/GCR/master/.p9k.zsh
    curl -o ~/.ohmytool https://raw.githubusercontent.com/gaojunbin/GCR/master/.ohmytool
    curl -o ~/.vimrc https://raw.githubusercontent.com/gaojunbin/GCR/master/.vimrc
    source ${shell_file}
}

ohmyshell(){
    echo -e 'List all func in .ohmyshell'
    echo -e '[*] myupdate     - support update GCR Toolkit from GitHub Repo.'
    echo -e '[*] mytool       - Some basic tools for common using.'
    echo -e '[*] mypip        - pip tools.'
    echo -e '[*] myenv        - Anaconda tools.'
    echo -e '[*] mygpu        - useful functions for GPU and cuda.'
    echo -e '[*] mypermission - some functions for permission, passward, etc.'
    echo -e '[*] mygit        - Git tools.'
}

# >>> mytool >>>
# Funtion:
# 1. jp - open jupyter lab
# 2. listen - ssh port forwarding
# 3. pathadd - add environment variable to PATH 
# 4. condainit - set conda initial and add startup shell to bashrc/zshrc
# 5. sz - view folder and file size
# 6. listen_vpn - listen remote server vpn (Only support Local)
# 7. download_googledrive - download file from google drive

# open jupyter notebook
jp(){
    echo -e 'Jupyter notebook starting...'
    echo -e 'Input port: \c'
    read port
    jupyter lab --port ${port} --no-browser
}

# ssh -NL
listen(){
    echo 'This is a funtion for SSH port forwarding. It has 3 modes.'
    echo '[1] -L :Local Forwarding - Local port listen the remote port.'
    echo '[2] -R :Remote Forwarding - Remote port listen the local port.'
    echo '[3] -D :Dynamic Forwarding - Use remote to forward local port. (socks5)'
    echo -e 'input you choose(default: 1) : \c'
    read func_num
    if [[ "${func_num}" = 1 ]] || [[ "${func_num}" = "" ]];then
        echo '[1] -L :Local Forwarding - Local port listen the remote port.'
        echo -e 'The Host: \c'
        read Host
        echo -e 'The Remote Port: \c'
        read RPort
        echo -e 'The Local Port (default: = Remote Port): \c'
        read LPort
        if [ "${LPort}" = "" ];then
            LPort=${RPort}
        fi
        echo -e "$ ssh -L localhost:${LPort}:localhost:${RPort} ${Host} -N"
        echo -e "Running at: \033[4mhttp://localhost:${LPort}\033[0m"
        ssh -L localhost:${LPort}:localhost:${RPort} ${Host} -N
    elif [ "${func_num}" = 2 ];then
        echo '[2] -R :Remote Forwarding - Remote port listen the local port.'
        echo -e 'The Host: \c'
        read Host
        echo -e 'The Local Port: \c'
        read LPort
        echo -e 'The Remote Port (default: = Local Port): \c'
        read RPort
        if [ "${RPort}" = "" ];then
            RPort=${LPort}
        fi
        echo -e "$ ssh -R localhost:${RPort}:localhost:${LPort} ${Host} -N"
        ssh -R localhost:${RPort}:localhost:${LPort} ${Host} -N
    elif [ "${func_num}" = 3 ];then
        echo '[3] -D :Dynamic Forwarding - Use remote to forward local port. (socks5)'
        echo -e 'The Host: \c'
        read Host
        echo -e 'The LPort Port: \c'
        read LPort
        echo -e "$ ssh -D {LPort} ${Host} -N"
        ssh -D ${LPort} ${Host} -N
    else
        echo -e 'Invalid Input!'
    fi
    
}

# add environment variable to PATH
pathadd(){
    echo -e 'This is a funtion to add environment variable to PATH. 
    Note: We will not help you to judge whether the input is valid, please be careful!'
    echo -e 'path: \c'
    read pth
    echo -e "whether to add to ${shell_file} (add permanently)? ([y]/n)? \c"
    read yon
    if [ "${yon}" = "y" ];then
        echo '# >>> [Added by .ohmyshell] Add PATH to env >>>' >> ${shell_file}
        echo "export PATH=${pth}:"'$PATH' >> ${shell_file}
        echo '# <<< [Added by .ohmyshell] Add PATH to env end <<<' >> ${shell_file}
    else
        export PATH=${pth}:$PATH
    fi
}

# Set conda initial and add startup shell to bashrc/zshrc.
condainit(){
    echo -e 'This is a funtion to set conda initial and add startup shell to bashrc/zshrc.'
    echo -e 'anaconda installed path (e.g. /usr/local/anaconda3): \c'
    read pth
    cpth=${pth}'/etc/profile.d/conda.sh'
    echo -e "whether to startup ${cpth} in ${shell_file}? ([y]/n)? \c"
    read yon
    if [ "${yon}" = "y" ];then
        echo '# >>> [Added by .ohmyshell] Conda initial >>>' >> ${shell_file}
        echo "source ${cpth}" >> ${shell_file}
        echo '# <<< [Added by .ohmyshell] Conda initial end <<<' >> ${shell_file}
        echo "Complete add [source ${cpth}] to ${shell_file}"
    fi
}

# view folder and file size
# TODO: add some param such like sz $1 $2
sz(){
    echo -e 'This is a funtion to view folder and file size.'
    echo -e 'Choose the Function [Number] you want:'
    echo -e '[1] view all computer'
    echo -e '[2] view folder or file'
    echo -e 'input you choose: \c'
    read func_num
    if [ "${func_num}" = 1 ];then
        echo "$ df -h"
        df -h
    elif [ "${func_num}" = 2 ];then
        echo -e 'input the folder or file to view (default: *, not support ~): \c'
        read fod_name
        echo -e 'input the max depth to view (default: 0): \c'
        read max_depth
        if [ "${max_depth}" = "" ];then
            max_depth=0
        fi
        # Different for MacOs and Linux
        if [ "$(uname -s)" = Linux ];then
            if [[ "${fod_name}" = "" ]] || [[ "${fod_name}" = "*" ]];then
                echo -e "$ du -h --max-depth=${max_depth} *"
                du -h --max-depth=${max_depth} *
            else
                echo -e "$ du -h --max-depth=${max_depth} ${fod_name}"
                du -h --max-depth=${max_depth} ${fod_name}
            fi
        elif [ "$(uname -s)" = Darwin ];then
            if [[ "${fod_name}" = "" ]] || [[ "${fod_name}" = "*" ]];then
                echo -e "$ du -h -d ${max_depth} *"
                du -h -d ${max_depth} *
            else
                echo -e "$ du -h -d ${max_depth} ${fod_name}"
                du -h -d ${max_depth} ${fod_name}
            fi
        else
            echo 'Not support current OS!'
        fi
    else
        echo 'Invalid Input!'
    fi
}

# listen remote server vpn (Only support Local)
listen_vpn(){
    echo 'Listen remote server vpn (Only support Local)'
    echo -e 'The Host: \c'
    read listen_vpn_Host
    echo -e 'The Local Port: \c'
    read listen_vpn_LPort
    echo -e "$ ssh -NL localhost:${listen_vpn_LPort}:localhost:9090 ${listen_vpn_Host}"
    echo -e "Running at: 
    \033[4mhttp://clash.razord.top\033[0m
    Host: 120.0.0.1
    Port: Local Port
    HTTP proxy port: 7890
    Socks5 proxy port: 7891
    Mode: Rules"
    ssh -NL localhost:${listen_vpn_LPort}:localhost:9090 ${listen_vpn_Host}
}

# download file from google drive
download_googledrive(){
    echo -e 'This is a funtion to download file/files from google drive.'

    # Method 1: use wget to download
    # echo -e 'file ID: \c'
    # read fileid
    # echo -e 'file Name: \c'
    # read filename
    # echo -e "$ wget --load-cookies /tmp/cookies.txt \"https://drive.google.com/uc?export=download\&confirm=$(wget --quiet --save-cookies /tmp/cookies.txt --keep-session-cookies --no-check-certificate 'https://drive.google.com/uc?export=download&id=${fileid}' -O- | sed -rn 's/.confirm=([0-9A-Za-z_]+)./\1\n/p')&id=${fileid}\" -O ${filename} && rm -rf /tmp/cookies.txt"
    # wget --load-cookies /tmp/cookies.txt "https://drive.google.com/uc?export=download&confirm=$(wget --quiet --save-cookies /tmp/cookies.txt --keep-session-cookies --no-check-certificate 'https://drive.google.com/uc?export=download&id=${fileid}' -O- | sed -rn 's/.confirm=([0-9A-Za-z_]+)./\1\n/p')&id=${fileid}" -O ${filename} && rm -rf /tmp/cookies.txt

    # Method 2: use gdown -  pip install gdown
    echo -e 'file(s) ID: \c'
    read fileid
    echo -e "whether a file folder? ([y]/n)? \c"
    read yon
    if [ "${yon}" = "y" ];then
        gdown ${fileid}
    else
        gdown --folder ${fileid}
    fi
}

# test vps
vpstest(){
    echo 'Test the vps.'
    bash <(curl -sL https://raw.githubusercontent.com/LloydAsp/NodeBench/main/NodeBench.sh)
}

# Integrate all tool commands
mytool(){
    echo -e 'Choose the Function [Number] for tools you want:'
    echo -e '[1] jp - open jupyter lab'
    echo -e '[2] listen - ssh -NL listen remote host'
    echo -e '[3] pathadd - add environment variable to PATH'
    echo -e '[4] condainit - set conda initial and add startup shell to bashrc/zshrc'
    echo -e '[5] sz - view folder and file size'
    echo -e '[6] listen_vpn - listen remote server vpn (Only support Local)'
    echo -e '[7] download_googledrive - download file from google drive'
    echo -e '[8] vpstest - test the vps.'
    echo -e 'input you choose: \c'
    read func_num
    if [ "${func_num}" = 1 ];then
        jp
    elif [ "${func_num}" = 2 ];then
        listen
    elif [ "${func_num}" = 3 ];then
        pathadd
    elif [ "${func_num}" = 4 ];then
        condainit
    elif [ "${func_num}" = 5 ];then
        sz
    elif [ "${func_num}" = 6 ];then
        listen_vpn
    elif [ "${func_num}" = 7 ];then
        download_googledrive
    elif [ "${func_num}" = 8 ];then
        vpstest
    else
        echo -e 'Invalid Input!'
    fi
}
# <<< myool end <<<

# >>> mypip >>>
# Function:
# 1. pipset - modify pip source
# 2. pipbase - pip install some base module
# 3. pipl - pip list and pip show
# 4. pipi - pip install
# 5. pipu - pip uninstall

# modify pip source
pipset(){
    THU_SOURCE=https://pypi.tuna.tsinghua.edu.cn/simple
    ALI_SOURCE=https://mirrors.aliyun.com/pypi/simple/
    TENCENT_SOURCE=http://mirrors.cloud.tencent.com/pypi/simple
    echo -e 'pip source:'
    echo -e '[1] Tsinghua Source'
    echo -e '[2] ALibaba Source'
    echo -e '[3] Tencent Source'
    echo -e 'Input your choose: \c'
    read func_num
    if [ "${func_num}" = 1 ];then
        SOURCE=${THU_SOURCE}
    elif [ "${func_num}" = 2 ];then
        SOURCE=${ALI_SOURCE}
    elif [ "${func_num}" = 3 ];then
        SOURCE=${TENCENT_SOURCE}
    else
        SOURCE=${THU_SOURCE}
        echo -e 'Invalid Input! Using THU default.'

    fi
    echo -e "$ pip config set global.index-url ${SOURCE}"
    pip config set global.index-url ${SOURCE}
}

# pip install some base module
pipbase(){
    base_module=('pygments' 'gpustat' 'jupyterlab' 'tensorboard' 'woaigpu' 'gdown', 'shell-gpt')
    for i in ${base_module[*]}; do
        echo -e "whether to $ pip install ${i}? (y/[n])? \c"
        read yon
        yon=${yon:-n}
        if [ "${yon}" = "y" ]; then
            pip install ${i}
        fi
    done
}

# pip list and pip show
pipl(){
    if [ "${1}" = "" ]; then
        echo '$ pip list'
        pip list
    else
        echo -e "$ pip show ${1}"
        pip show ${1}
    fi
}

# pip install
pipi(){
    if [ "${1}" = "" ]; then
        echo -e 'whether to $ pip install req*.txt? ([y]/n)? \c'
        read yon
        if [ "${yon}" = "y" ];then
            pip install -r req*.txt
        fi
    else
        echo -e "$ pip install ${1}"
        pip install ${1}
    fi
}

# pip uninstall
pipu(){
    if [ "${1}" = "" ]; then
        pipl
        echo -e 'choose which to uninstall: \c'
        read pkg
        pip uninstall ${pkg} 
    else
       pip uninstall ${1}
    fi
}

# Integrate all tool commands
mypip(){
    echo -e 'Choose the Function [Number] for tools you want:'
    echo -e '[1] pipset - modify pip source'
    echo -e '[2] pipbase - pip install some base module'
    echo -e '[3] pipl - pip list or pip show'
    echo -e '[4] pipi - pip install'
    echo -e '[5] pipu - pip uninstall'
    echo -e 'input you choose: \c'
    read func_num
    if [ "${func_num}" = 1 ];then
        pipset
    elif [ "${func_num}" = 2 ];then
        pipbase
    elif [ "${func_num}" = 3 ];then
        pipl
    elif [ "${func_num}" = 4 ];then
        pipi
    elif [ "${func_num}" = 5 ];then
        pipu
    else
        echo -e 'Invalid Input!'
    fi
}
# <<< mypip end <<<

# >>> myenv >>>
# Funtion:
# 1. env - Activate an environment
# 2. lenv - List installed environments
# 3. cenv - Create new environments
# 4. denv - Delete an installed environment

# conda activate
env(){
    if [ "${1}" = "" ]; then
        conda env list
        echo -e 'environment name: \c'
        read Env_name
        if [ "${Env_name}" = "" ]; then
            echo '$ conda deactivate'
            conda deactivate
        else
            conda activate ${Env_name};
        fi
	else
		conda activate ${1}
	fi
}

# list conda envs
alias lenv='conda info -e'

# create conda env
cenv(){
    echo -e 'The name of the environment to create: \c'
    read Env_name
    conda env list
    echo -e 'Copy from existing env (default no copy): \c'
    read Source_Env_name
    if [ "${Source_Env_name}" = "" ];then
        echo -e 'Python version (default 3.7): \c'
        read Py_version
        if [ "${Py_version}" = "" ];then
            echo -e "$ conda create --name ${Env_name} python=3.7 ipykernel -y"
            conda create --name ${Env_name} python=3.7 ipykernel -y
            echo -e "$ python -m ipykernel install --user --name ${Env_name}"
            python -m ipykernel install --user --name ${Env_name}
        else
            echo -e "$ conda create --name ${Env_name} python=${Py_version} ipykernel -y"
            conda create --name ${Env_name} python=${Py_version} ipykernel -y
            echo -e "$ python -m ipykernel install --user --name ${Env_name}"
            python -m ipykernel install --user --name ${Env_name}
        fi
    else
        conda create --name ${Env_name} --clone ${Source_Env_name}
    fi
}

# delete conda env
denv(){
    conda env list
    echo -e 'The name of the environment to delete: \c'
    read Env_name
    echo -e "Do you want to delete the environment: ${Env_name}? ([y]/n)? \c"
    read yon
    if [ "${yon}" = "y" ];then
        echo -e "$ conda remove -n ${Env_name} --all"
        conda remove -n ${Env_name} --all
    else
        echo -e "${Env_name} not deleted."
    fi
}

# Integrate all conda commands
myenv(){
    echo -e 'Choose the Function [Number] for conda you want:'
    echo -e '[1] env - Activate an environment'
    echo -e '[2] lenv - List installed environments'
    echo -e '[3] cenv - Create new environments'
    echo -e '[4] denv - Delete an installed environment'
    echo -e 'input you choose: \c'
    read func_num
    if [ "${func_num}" = 1 ];then
        env
    elif [ "${func_num}" = 2 ];then
        lenv
    elif [ "${func_num}" = 3 ];then
        cenv
    elif [ "${func_num}" = 4 ];then
        denv
    else
        echo -e 'Invalid Input!'
    fi
}
# <<< myenv end <<<

# >>> mygpu >>>
# Function:
# 1. gpu - gpustat realtime
# 2. nvidia - nvidia-smi realtime
# 3. pid - view pids for all gpus
# 4. gpus - CUDA_VISIBLE_DEVICES

# gpu listen
alias gpu='gpustat -i 0.2 -p'
alias nvidia='watch -n 0.2 nvidia-smi'
alias gpus='echo "CUDA_VISIBLE_DEVICES"'

# View pids for all gpus 
pid(){
    echo -e "Use sudo? ([y]/n)? \c"
    read yon
    if [ "${yon}" = "y" ];then
        echo '$ sudo fuser -v /dev/nvidia*'
        sudo fuser -v /dev/nvidia*
    else
        echo '$ fuser -v /dev/nvidia*'
        fuser -v /dev/nvidia*
    fi
}

# Integrate all GPU commands
mygpu(){
    echo -e 'Choose the Function [Number] for GPU you want:'
    echo -e '[1] gpu - gpustat realtime'
    echo -e '[2] nvidia - nvidia-smi realtime'
    echo -e '[3] pid - view pids for all gpus'
    echo -e '[4] gpus - CUDA_VISIBLE_DEVICES'
    echo -e 'input you choose: \c'
    read func_num
    if [ "${func_num}" = 1 ];then
        gpu
    elif [ "${func_num}" = 2 ];then
        nvidia
    elif [ "${func_num}" = 3 ];then
        pid
    elif [ "${func_num}" = 4 ];then
        echo 'CUDA_VISIBLE_DEVICES'
    else
        echo -e 'Invalid Input!'
    fi
}
# <<< GPU end <<<

# >>> mypermission >>>
# Function:
# 1. mychmod - modify directory permissions levels
# 2. mychown - modify directory owners
# 3. passwd - change passwards

# chmod
mychmod(){
    echo -e 'This is a funtion for [chmod] to modify directory permission levels.'
    echo -e 'Input directory: \c'
    read dir
    if [ -d "${dir}" ];then
        echo -e 'Input permission level (e.g. 777): \c'
        read permission
        echo -e "Do you want to change the directory [${dir}] to [${permission}]? ([y]/n)? \c"
        read yon
        if [ "${yon}" = "y" ];then
            echo -e "Use sudo? ([y]/n)? \c"
            read yyon
            if [ "${yyon}" = "y" ];then
                echo -e "$ sudo chmod -R ${permission} ${dir}"
                sudo chmod -R ${permission} ${dir}
            else
                echo -e "$ chmod -R ${permission} ${dir}"
                chmod -R ${permission} ${dir}
            fi
        fi
    else
        echo -e 'Invalid direcctory!'
    fi
}

# chown 
mychown(){
    echo -e 'This is a funtion for [chown] to modify directory owners.'
    echo -e 'Input directory: \c'
    read dir
    if [ -d "${dir}" ];then
        echo -e 'Input new owner (user or user:group): \c'
        read owner
        echo -e "Do you want to change the directory [${dir}] to the owner [${owner}]? ([y]/n)? \c"
        read yon
        if [ "${yon}" = "y" ];then
            echo -e "Use sudo? ([y]/n)? \c"
            read yyon
            if [ "${yyon}" = "y" ];then
                echo -e "$ sudo chown -R ${owner} ${dir}"
                sudo chown -R ${owner} ${dir}
            else
                echo -e "$ chown -R ${owner} ${dir}"
                chown -R ${owner} ${dir}
            fi
        fi
    else
        echo -e 'Invalid direcctory!'
    fi
}

# Integrate all Permission commands
mypermission(){
    echo -e 'Choose the Function [Number] for Permission you want:'
    echo -e '[1] mychmod - modify directory permissions levels'
    echo -e '[2] mychown - modify directory owners'
    echo -e '[3] passwd - change passward'
    echo -e 'input you choose: \c'
    read func_num
    if [ "${func_num}" = 1 ];then
        mychmod
    elif [ "${func_num}" = 2 ];then
        mychown
    elif [ "${func_num}" = 3 ];then
        passwd
    else
        echo -e 'Invalid Input!'
    fi
}
# <<< mypermission end <<<

# >>> mygit >>>
# some git config
alias gita='git add'
alias gitaa='git add .'
alias gitb='git branch'
gitc(){
    echo -e 'Commit content: \c'
    read commit
    git commit -m ${commit}
}
alias gitl='git log'
alias gitr='git reset'
alias gc='git clone'
gitch(){
    if [ "${1}" = "" ]; then
        gitb
        echo -e 'which branch to checkout: \c'
        read branch_name
        git checkout ${branch_name};
	else
		git checkout ${1}
	fi
}
alias gitps='git push origin master'
alias gitpl='git pull'
alias gitst='git status'

# Integrate all Git commands
mygit(){
    echo -e 'Choose the Function [Number] for Git you want:'
    echo -e '[1] gita - git add'
    echo -e '[2] gitaa - git add .'
    echo -e '[3] gitc - git commit'
    echo -e '[4] gitl - git log'
    echo -e '[5] gitr - git reset'
    echo -e '[6] gc - git clone'
    echo -e '[7] gitch - git checkout'
    echo -e '[8] gitps - git push origin master'
    echo -e '[9] gitbpl - git pull'
    echo -e '[10] gitst - git status'
    echo -e '[11] gitb - git branch'
    echo -e 'input you choose: \c'
    read func_num
    if [ "${func_num}" = 1 ];then
        gita
    elif [ "${func_num}" = 2 ];then
        gitaa
    elif [ "${func_num}" = 3 ];then
        gitc
    elif [ "${func_num}" = 4 ];then
        gitl
    elif [ "${func_num}" = 5 ];then
        gitr
    elif [ "${func_num}" = 6 ];then
        gc
    elif [ "${func_num}" = 7 ];then
        gitch
    elif [ "${func_num}" = 8 ];then
        gitps
    elif [ "${func_num}" = 9 ];then
        gitpl
    elif [ "${func_num}" = 10 ];then
        gitst
    elif [ "${func_num}" = 11 ];then
        gitb
    else
        echo -e 'Invalid Input!'
    fi
}
# <<< mygit end <<<

# >>> Others >>>
# update bash/zsh profile
alias sc="source ${shell_file}"
# list directory
if [[ -f ~/.ruby/bin/colorls ]] || [[ -f /usr/local/bin/colorls ]];then
    if [[ -f ~/.ruby/bin/colorls ]];then
        export PATH=~/.ruby/bin:$PATH
    fi
    alias ls='colorls --sd'
    alias la='colorls --sd --all'
    alias ll='colorls --sd --all -l'
    alias tree='colorls --tree'
else
    alias ll='ls -alF'
    alias la='ls -A'
    alias l='ls -CF'
fi
# clear terminal
alias cl='clear'
# view code with format
alias pcat='pygmentize -g'
# open with vs code (only on MacOS)
alias code='open -a "Visual Studio Code"'
# open tensorboard with tb
alias tb='tensorboard --logdir=./'
# download files or folder
alias download='tsz -r'
# upload folder
alias upload='trz -r'
# open ssh with tssh --dragfile
alias tsshd='tssh --dragfile'
# VPN commands (only for Linux)
startvpn(){
    echo 'Start VPN in terminal!'
    echo 'Must be install vpn before. If not, run install_vpn for linux.'
    echo -e "socks5 proxy(default: 7891): \c"
    read all_port
    echo -e "http proxy(default: 7890): \c"
    read http_port
    echo -e "https proxy(default: 7890): \c"
    read https_port
    if [ "${all_port}" = "" ];then
        all_port=7891
    fi
    if [ "${http_port}" = "" ];then
        http_port=7890
    fi
    if [ "${https_port}" = "" ];then
        https_port=7890
    fi
    echo -e "$ export ALL_PROXY=socks5://127.0.0.1:${all_port}"
    echo -e "$ export http_proxy=http://127.0.0.1:${http_port}"
    echo -e "$ export https_proxy=http://127.0.0.1:${https_port}"
    export ALL_PROXY=socks5://127.0.0.1:${all_port}
    export http_proxy=http://127.0.0.1:${http_port}
    export https_proxy=http://127.0.0.1:${https_port}
    echo 'You can see status by $ curl cip.cc / $ curl -x $ALL_PROXY cip.cc'

}
alias stopvpn='echo \
"Stop VPN in terminal!
You can see status by $ curl cip.cc" \
&& unset ALL_PROXY && unset http_proxy && unset https_proxy'

# a uniform function to view files with different formats
uview(){
    if [ "${1}" = "" ]; then
        echo -e 'File Name: \c'
        read filename
	else
		filename=${1}
	fi

    if [ -f ${filename} ];then
        case "${filename}" in
            *.bam ) samtools view ${filename} | less -S;;
            * ) echo "Not support this format. Supported formats: [.bam]";;
        esac
    else
        echo "${filename} not exist."
    fi
}

# <<< Others end <<<
